
import java.util.*;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
// Abstract class representing a person
abstract class person
{
    private String id;
    private String name;
    private int age;
    // Abstract method to get details of a person
    abstract void getDetails();
    // Constructor to initialize person details
    person(String id,String name,int age)
    {
        this.id=id;
        this.name=name;
        this.age=age;
    }
    // Getters for person attributes
  public String getId(){return id;}
  public String getName(){return name;}
  public int getAge(){return age;}
}
// Class representing a student, inheriting from Person
class student extends person{

    private int studentId;
    private List<Course>courses;
    // Constructor to initialize student details
    student(int studentid,String id,String name,int age)
    {
      super(id,name,age);
      this.studentId=studentid;
      this.courses= new ArrayList<>();
    }
    public int getStudentId(){return studentId;}
    public List<Course>getcourses() {return courses;}
    void getDetails()
    {
        System.out.println("Aadhar Id:"+getId());
        System.out.println("Name:"+getName());
        System.out.println("Age:"+getAge());
        System.out.println("Student Id:"+getStudentId());
        System.out.println("Enrolled Courses");
        for(Course c:courses){
            if(c!=null){
            System.out.println(c.courseName);}
        }
        System.out.println("    *************  ");
    }
   public  void enrollCourse(Course course)
    {
       courses.add(course);
    }
}
// Class representing a faculty member, inheriting from Person
class faculty extends  person{

   private int employeeId;
   private String department;
   private String course;

    faculty(int employeeId,String id,String name,int age ,String department,String course)
    {
        super(id,name,age);
        this.employeeId=employeeId;
        this.department=department;
        this.course=course;

    }

    public int  getEmployeeId() {return employeeId;}
    public String getDepartment(){return department;}
    public String getCourse(){return course;}
    void getDetails()
    {
        System.out.println("    Aadhar card:"+getId());
        System.out.println("    Employee Id:"+getEmployeeId());
        System.out.println("    Name:"+getName());
        System.out.println("    Age:"+getAge());
        System.out.println("    Department:"+getDepartment());
        System.out.println("    Course Taught:"+getCourse());
        System.out.println("    ");
        System.out.println("    ");
    }
}
class Course {
    String coursecode;
    String courseName;
    double credits;
    public Course(String coursecode,String courseName,double credits)
    {
        this.coursecode=coursecode;
        this.courseName=courseName;
        this.credits=credits;
    }
    public String getCourseCode(){return coursecode;}
    public String getCourseName(){return courseName;}
    public double getCredits(){return credits;}

}
class University{
    List<student>students;
    List<faculty>faculty;
    List<Course>course;
    public University(){
        students=new ArrayList<>();
        faculty=new ArrayList<>();
        course =new ArrayList<>();
    }
    // Method to add a student
    public void addStudents(Scanner sc){

        sc.nextLine();
        System.out.println("Enter Aadhar Id:");
        String acard=sc.nextLine();
        sc.nextLine();
        System.out.println("Enter Student Id:");
        int sid=sc.nextInt();
        sc.nextLine();
        System.out.println("Enter Student Name:");
        String sname=sc.nextLine();
        sc.nextLine();
        System.out.println("Enter Enter age");
        int age=sc.nextInt();
        sc.nextLine();
        student s=new student(sid,acard,sname,age);
        students.add(s);
        System.out.println();
        System.out.println("Student Registered Successfully");

    }
    // Method to remove a student
    public void removeStudents(Scanner sc)
    {
        System.out.println("    Remove Student");
        System.out.println("    Enter Student Id to remove:");
        int found=0;
        int studentId=sc.nextInt();
        for(student s: students)
        {
            if(s.getStudentId()==studentId)
            {
                students.remove(s);
                found=1;
                break;
            }
        }
        if(found==1) System.out.println("   Student Removed Successfully");
        else System.out.println("   Student not found!!");
        return;
    }
    // Method to add a faculty member
    public void addFaculty(Scanner sc){
        sc.nextLine();
        System.out.println("Enter Aadhar Number");
        String tcard=sc.nextLine();
        System.out.println("Enter Teacher ID");
        int tid=sc.nextInt();
        sc.nextLine();
        System.out.println("Enter Teacher Name:");
        String tname=sc.nextLine();
        sc.nextLine();
        System.out.println("Enter Age: ");
        int tage=sc.nextInt();
        sc.nextLine();
        System.out.println("Enter Department:");
        String department=sc.nextLine();
        sc.nextLine();
        System.out.println("Enter course ");
        String tcourse=sc.nextLine();
        faculty f=new faculty(tid,tcard,tname,tage,department,tcourse);
        faculty.add(f);
    }
    // Method to remove a faculty member
    public void removefaculty(Scanner sc)
    {
        System.out.println("    Remove Student");
        System.out.println("    Enter Teacher Id to remove:");
        int found=0;
        int studentId=sc.nextInt();
        for( faculty f: faculty)
        {
            if(f.getEmployeeId()==studentId)
            {
                faculty.remove(f);
                found=1;
                break;
            }
        }
        if(found==1) System.out.println("   Student Removed Successfully");
        else System.out.println("   Student not found!!");
        return;

    }
    // Method to add a course
    public void addCourses(Scanner sc)
    {
        sc.nextLine();
        System.out.println("Enter Course Code:");
        String code=sc.nextLine();
        System.out.println("Enter Course Name");
        String cname=sc.nextLine();
        System.out.println("Credit Hours for the course");
        double credits=sc.nextInt();
        sc.nextLine();
        Course c=new Course(code,cname,credits);
        course.add(c);
        System.out.println("Course Added Successfully");

    }
    // Method to remove a course
    public void removeCourses(Scanner sc)
    {
        System.out.println("    Remove Course");
        System.out.println("    Enter Course Id to remove:");
        int found=0;
        String Courseid=sc.nextLine();
        for(Course c: course)
        {
            if(c.getCourseCode().equals(Courseid))
            {
                course.remove(c);
                found=1;
                break;
            }
        }
        if(found==1) System.out.println("   Course Removed Successfully");
        else System.out.println("   Course not found!!");

    }

}
public class Main {
         static Scanner sc=new Scanner(System.in);
    public static void main(String[] args) {
        University u=new University();
        System.out.println("    University Management System");
        while(true) {
            System.out.println("                Menu");
            System.out.println("           1.Register Student ");
            System.out.println("           2.Enroll course");
            System.out.println("           3.Add Courses ");
            System.out.println("           4.Add Faculty");
            System.out.println("           5.Remove Students");
            System.out.println("           6.Remove Course");
            System.out.println("           7.Remove Faculty");
            System.out.println("           8.Display Enrolled Students");
            System.out.println("           9.Display teaching Faculty");
            System.out.println("           10.Available Courses");
            System.out.println("           0 .Exit");

            int ch=sc.nextInt();
            switch (ch)
            {
                case 1:
                    u.addStudents(sc);
                    break;
                case 2:
                    System.out.println("   Enroll Course");
                    System.out.println("   Enter Student id");
                    int stdid=sc.nextInt();
                    System.out.println("         Available Courses");
                    for(Course course:u.course)
                    {
                        System.out.println("    Course code : "+course.getCourseCode());
                        System.out.println("    Course Name : "+course.getCourseName());
                        System.out.println("    Course Credit : "+ course.getCredits());
                    }
                    sc.nextLine();
                    System.out.println("Select Course Code");
                    String coursecode=sc.nextLine();
                    Course co=null;
                    for(Course course:u.course){
                        if(course.getCourseCode().equals(coursecode)){
                            co=course;
                            break;
                        }
                    }
                    if(co!=null){
                    for(student std: u.students){
                        if(std.getStudentId()==stdid){
                            std.enrollCourse(co);
                            break;
                        }
                    }
                        System.out.println("Course enrolled successfully");}
                    else{
                        System.out.println("Course is not present");
                    }
                    break;
                case 3:
                    u.addCourses(sc);
                     break;
                case 4:
                   u.addFaculty(sc);
                    break;
                case 5:
                    u.removeStudents(sc);
                    break;
                case 6:
                    u.removeCourses(sc);
                    break;
                case 7:
                    u.removefaculty(sc);
                    break;
                case 8:
                    System.out.println("    Enrolled Students are: "  );
                    for(student student: u.students){
                        student.getDetails();
                    }
                    break;
                case 9:
                    System.out.println("    Faculty Members");
                    for(faculty faculty:u.faculty){
                        faculty.getDetails();
                    }
                    break;
                case 10:
                    System.out.println("         Available Courses");
                    for(Course course:u.course)
                    {
                        System.out.println("    Course code : "+course.getCourseCode());
                        System.out.println("    Course Name : "+course.getCourseName());
                        System.out.println("    Course Credit : "+ course.getCredits());
                    }
                    break;
                default:
                    System.out.println("Invalid choice!!");
            }



        }

    }
}
